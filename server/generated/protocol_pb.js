// source: protocol.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Hello', null, global);
goog.exportSymbol('proto.Msg', null, global);
goog.exportSymbol('proto.MsgBack', null, global);
goog.exportSymbol('proto.MsgBack.ShowType', null, global);
goog.exportSymbol('proto.ParsedRemote', null, global);
goog.exportSymbol('proto.Relay', null, global);
goog.exportSymbol('proto.ScreenContent', null, global);
goog.exportSymbol('proto.ScreenOffset', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Hello = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Hello, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Hello.displayName = 'proto.Hello';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Relay = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Relay, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Relay.displayName = 'proto.Relay';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ParsedRemote = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ParsedRemote, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ParsedRemote.displayName = 'proto.ParsedRemote';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Msg = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Msg.repeatedFields_, null);
};
goog.inherits(proto.Msg, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Msg.displayName = 'proto.Msg';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ScreenOffset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ScreenOffset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ScreenOffset.displayName = 'proto.ScreenOffset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ScreenContent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ScreenContent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ScreenContent.displayName = 'proto.ScreenContent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MsgBack = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.MsgBack, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MsgBack.displayName = 'proto.MsgBack';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Hello.prototype.toObject = function(opt_includeInstance) {
  return proto.Hello.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Hello} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hello.toObject = function(includeInstance, msg) {
  var f, obj = {
    versionmajor: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    versionminor: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    versionlast: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    screenenabled: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    settings: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Hello}
 */
proto.Hello.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Hello;
  return proto.Hello.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Hello} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Hello}
 */
proto.Hello.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionmajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionminor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersionlast(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScreenenabled(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Hello.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Hello.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Hello} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Hello.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * required int32 versionMajor = 1;
 * @return {number}
 */
proto.Hello.prototype.getVersionmajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.setVersionmajor = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.clearVersionmajor = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Hello.prototype.hasVersionmajor = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 versionMinor = 2;
 * @return {number}
 */
proto.Hello.prototype.getVersionminor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.setVersionminor = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.clearVersionminor = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Hello.prototype.hasVersionminor = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 versionLast = 3;
 * @return {number}
 */
proto.Hello.prototype.getVersionlast = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.setVersionlast = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.clearVersionlast = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Hello.prototype.hasVersionlast = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required bool screenEnabled = 4;
 * @return {boolean}
 */
proto.Hello.prototype.getScreenenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.setScreenenabled = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.clearScreenenabled = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Hello.prototype.hasScreenenabled = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string settings = 5;
 * @return {string}
 */
proto.Hello.prototype.getSettings = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.setSettings = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Hello} returns this
 */
proto.Hello.prototype.clearSettings = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Hello.prototype.hasSettings = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Relay.prototype.toObject = function(opt_includeInstance) {
  return proto.Relay.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Relay} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relay.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    state: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Relay}
 */
proto.Relay.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Relay;
  return proto.Relay.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Relay} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Relay}
 */
proto.Relay.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Relay.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Relay.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Relay} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Relay.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.Relay.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Relay} returns this
 */
proto.Relay.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Relay} returns this
 */
proto.Relay.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Relay.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required bool state = 2;
 * @return {boolean}
 */
proto.Relay.prototype.getState = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Relay} returns this
 */
proto.Relay.prototype.setState = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Relay} returns this
 */
proto.Relay.prototype.clearState = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Relay.prototype.hasState = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ParsedRemote.prototype.toObject = function(opt_includeInstance) {
  return proto.ParsedRemote.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ParsedRemote} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ParsedRemote.toObject = function(includeInstance, msg) {
  var f, obj = {
    remote: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    key: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ParsedRemote}
 */
proto.ParsedRemote.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ParsedRemote;
  return proto.ParsedRemote.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ParsedRemote} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ParsedRemote}
 */
proto.ParsedRemote.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setRemote(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ParsedRemote.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ParsedRemote.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ParsedRemote} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ParsedRemote.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string remote = 1;
 * @return {string}
 */
proto.ParsedRemote.prototype.getRemote = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ParsedRemote} returns this
 */
proto.ParsedRemote.prototype.setRemote = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ParsedRemote} returns this
 */
proto.ParsedRemote.prototype.clearRemote = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ParsedRemote.prototype.hasRemote = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string key = 2;
 * @return {string}
 */
proto.ParsedRemote.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ParsedRemote} returns this
 */
proto.ParsedRemote.prototype.setKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ParsedRemote} returns this
 */
proto.ParsedRemote.prototype.clearKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ParsedRemote.prototype.hasKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Msg.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Msg.prototype.toObject = function(opt_includeInstance) {
  return proto.Msg.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Msg} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    timeseq: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    hello: (f = msg.getHello()) && proto.Hello.toObject(includeInstance, f),
    irkeyperiodsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f,
    debuglogmessage: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    relaystatesList: jspb.Message.toObjectList(msg.getRelaystatesList(),
    proto.Relay.toObject, includeInstance),
    parsedremote: (f = msg.getParsedremote()) && proto.ParsedRemote.toObject(includeInstance, f),
    buttonpressed: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    weight: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
    temp: (f = jspb.Message.getOptionalFloatingPointField(msg, 10)) == null ? undefined : f,
    humidity: (f = jspb.Message.getOptionalFloatingPointField(msg, 11)) == null ? undefined : f,
    pressure: (f = jspb.Message.getOptionalFloatingPointField(msg, 12)) == null ? undefined : f,
    potentiometer: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    atxstate: (f = jspb.Message.getBooleanField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Msg}
 */
proto.Msg.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Msg;
  return proto.Msg.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Msg} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Msg}
 */
proto.Msg.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimeseq(value);
      break;
    case 3:
      var value = new proto.Hello;
      reader.readMessage(value,proto.Hello.deserializeBinaryFromReader);
      msg.setHello(value);
      break;
    case 4:
      var value = /** @type {!Array<number>} */ (reader.readPackedUint32());
      msg.setIrkeyperiodsList(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setDebuglogmessage(value);
      break;
    case 6:
      var value = new proto.Relay;
      reader.readMessage(value,proto.Relay.deserializeBinaryFromReader);
      msg.addRelaystates(value);
      break;
    case 7:
      var value = new proto.ParsedRemote;
      reader.readMessage(value,proto.ParsedRemote.deserializeBinaryFromReader);
      msg.setParsedremote(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setButtonpressed(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWeight(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTemp(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHumidity(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPressure(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPotentiometer(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAtxstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Msg.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Msg.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Msg} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Msg.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getHello();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Hello.serializeBinaryToWriter
    );
  }
  f = message.getIrkeyperiodsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRelaystatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Relay.serializeBinaryToWriter
    );
  }
  f = message.getParsedremote();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.ParsedRemote.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
};


/**
 * required int32 id = 1;
 * @return {number}
 */
proto.Msg.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 timeseq = 2;
 * @return {number}
 */
proto.Msg.prototype.getTimeseq = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setTimeseq = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearTimeseq = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasTimeseq = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Hello hello = 3;
 * @return {?proto.Hello}
 */
proto.Msg.prototype.getHello = function() {
  return /** @type{?proto.Hello} */ (
    jspb.Message.getWrapperField(this, proto.Hello, 3));
};


/**
 * @param {?proto.Hello|undefined} value
 * @return {!proto.Msg} returns this
*/
proto.Msg.prototype.setHello = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearHello = function() {
  return this.setHello(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasHello = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint32 irKeyPeriods = 4;
 * @return {!Array<number>}
 */
proto.Msg.prototype.getIrkeyperiodsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setIrkeyperiodsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.addIrkeyperiods = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearIrkeyperiodsList = function() {
  return this.setIrkeyperiodsList([]);
};


/**
 * optional string debugLogMessage = 5;
 * @return {string}
 */
proto.Msg.prototype.getDebuglogmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setDebuglogmessage = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearDebuglogmessage = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasDebuglogmessage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Relay relayStates = 6;
 * @return {!Array<!proto.Relay>}
 */
proto.Msg.prototype.getRelaystatesList = function() {
  return /** @type{!Array<!proto.Relay>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Relay, 6));
};


/**
 * @param {!Array<!proto.Relay>} value
 * @return {!proto.Msg} returns this
*/
proto.Msg.prototype.setRelaystatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Relay=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Relay}
 */
proto.Msg.prototype.addRelaystates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Relay, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearRelaystatesList = function() {
  return this.setRelaystatesList([]);
};


/**
 * optional ParsedRemote parsedRemote = 7;
 * @return {?proto.ParsedRemote}
 */
proto.Msg.prototype.getParsedremote = function() {
  return /** @type{?proto.ParsedRemote} */ (
    jspb.Message.getWrapperField(this, proto.ParsedRemote, 7));
};


/**
 * @param {?proto.ParsedRemote|undefined} value
 * @return {!proto.Msg} returns this
*/
proto.Msg.prototype.setParsedremote = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearParsedremote = function() {
  return this.setParsedremote(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasParsedremote = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool buttonPressed = 8;
 * @return {boolean}
 */
proto.Msg.prototype.getButtonpressed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setButtonpressed = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearButtonpressed = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasButtonpressed = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 weight = 9;
 * @return {number}
 */
proto.Msg.prototype.getWeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setWeight = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearWeight = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasWeight = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional float temp = 10;
 * @return {number}
 */
proto.Msg.prototype.getTemp = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setTemp = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearTemp = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasTemp = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional float humidity = 11;
 * @return {number}
 */
proto.Msg.prototype.getHumidity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setHumidity = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearHumidity = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasHumidity = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional float pressure = 12;
 * @return {number}
 */
proto.Msg.prototype.getPressure = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setPressure = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearPressure = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasPressure = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 potentiometer = 13;
 * @return {number}
 */
proto.Msg.prototype.getPotentiometer = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setPotentiometer = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearPotentiometer = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasPotentiometer = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool atxState = 14;
 * @return {boolean}
 */
proto.Msg.prototype.getAtxstate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.setAtxstate = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Msg} returns this
 */
proto.Msg.prototype.clearAtxstate = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Msg.prototype.hasAtxstate = function() {
  return jspb.Message.getField(this, 14) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ScreenOffset.prototype.toObject = function(opt_includeInstance) {
  return proto.ScreenOffset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ScreenOffset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ScreenOffset.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    y: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    atms: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ScreenOffset}
 */
proto.ScreenOffset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ScreenOffset;
  return proto.ScreenOffset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ScreenOffset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ScreenOffset}
 */
proto.ScreenOffset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAtms(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ScreenOffset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ScreenOffset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ScreenOffset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ScreenOffset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required int32 x = 1;
 * @return {number}
 */
proto.ScreenOffset.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ScreenOffset} returns this
 */
proto.ScreenOffset.prototype.setX = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ScreenOffset} returns this
 */
proto.ScreenOffset.prototype.clearX = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ScreenOffset.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 y = 2;
 * @return {number}
 */
proto.ScreenOffset.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ScreenOffset} returns this
 */
proto.ScreenOffset.prototype.setY = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ScreenOffset} returns this
 */
proto.ScreenOffset.prototype.clearY = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ScreenOffset.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 atMs = 3;
 * @return {number}
 */
proto.ScreenOffset.prototype.getAtms = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ScreenOffset} returns this
 */
proto.ScreenOffset.prototype.setAtms = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ScreenOffset} returns this
 */
proto.ScreenOffset.prototype.clearAtms = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ScreenOffset.prototype.hasAtms = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ScreenContent.prototype.toObject = function(opt_includeInstance) {
  return proto.ScreenContent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ScreenContent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ScreenContent.toObject = function(includeInstance, msg) {
  var f, obj = {
    width: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    content: msg.getContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ScreenContent}
 */
proto.ScreenContent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ScreenContent;
  return proto.ScreenContent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ScreenContent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ScreenContent}
 */
proto.ScreenContent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ScreenContent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ScreenContent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ScreenContent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ScreenContent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * required uint32 width = 1;
 * @return {number}
 */
proto.ScreenContent.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.ScreenContent} returns this
 */
proto.ScreenContent.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ScreenContent} returns this
 */
proto.ScreenContent.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ScreenContent.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 height = 2;
 * @return {number}
 */
proto.ScreenContent.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ScreenContent} returns this
 */
proto.ScreenContent.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ScreenContent} returns this
 */
proto.ScreenContent.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ScreenContent.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required bytes content = 3;
 * @return {!(string|Uint8Array)}
 */
proto.ScreenContent.prototype.getContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * required bytes content = 3;
 * This is a type-conversion wrapper around `getContent()`
 * @return {string}
 */
proto.ScreenContent.prototype.getContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContent()));
};


/**
 * required bytes content = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContent()`
 * @return {!Uint8Array}
 */
proto.ScreenContent.prototype.getContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.ScreenContent} returns this
 */
proto.ScreenContent.prototype.setContent = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.ScreenContent} returns this
 */
proto.ScreenContent.prototype.clearContent = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ScreenContent.prototype.hasContent = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MsgBack.prototype.toObject = function(opt_includeInstance) {
  return proto.MsgBack.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MsgBack} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBack.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    introduceyourself: (f = jspb.Message.getBooleanField(msg, 200)) == null ? undefined : f,
    reboot: (f = jspb.Message.getBooleanField(msg, 201)) == null ? undefined : f,
    screenenable: (f = jspb.Message.getBooleanField(msg, 202)) == null ? undefined : f,
    testmsg: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    unixtime: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    texttoshow: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    timemstoshow: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    showtype: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f,
    relaystoswitch: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
    relaystoswitchstate: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    atxenable: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    playmp3: (f = jspb.Message.getField(msg, 11)) == null ? undefined : f,
    volume: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    brightness: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    pwmpin: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    pwmvalue: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    pwmperiod: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    ledvalue: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
    ledperiod: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
    ledbasecolor: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    ledblinkcolors: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    screencontent: (f = msg.getScreencontent()) && proto.ScreenContent.toObject(includeInstance, f),
    screenoffsetfrom: (f = msg.getScreenoffsetfrom()) && proto.ScreenOffset.toObject(includeInstance, f),
    screenoffsetto: (f = msg.getScreenoffsetto()) && proto.ScreenOffset.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MsgBack}
 */
proto.MsgBack.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MsgBack;
  return proto.MsgBack.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MsgBack} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MsgBack}
 */
proto.MsgBack.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 200:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIntroduceyourself(value);
      break;
    case 201:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReboot(value);
      break;
    case 202:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScreenenable(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTestmsg(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnixtime(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTexttoshow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimemstoshow(value);
      break;
    case 7:
      var value = /** @type {!proto.MsgBack.ShowType} */ (reader.readEnum());
      msg.setShowtype(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRelaystoswitch(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRelaystoswitchstate(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAtxenable(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPlaymp3(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVolume(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBrightness(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPwmpin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPwmvalue(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPwmperiod(value);
      break;
    case 17:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedvalue(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLedperiod(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedbasecolor(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setLedblinkcolors(value);
      break;
    case 300:
      var value = new proto.ScreenContent;
      reader.readMessage(value,proto.ScreenContent.deserializeBinaryFromReader);
      msg.setScreencontent(value);
      break;
    case 301:
      var value = new proto.ScreenOffset;
      reader.readMessage(value,proto.ScreenOffset.deserializeBinaryFromReader);
      msg.setScreenoffsetfrom(value);
      break;
    case 302:
      var value = new proto.ScreenOffset;
      reader.readMessage(value,proto.ScreenOffset.deserializeBinaryFromReader);
      msg.setScreenoffsetto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MsgBack.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MsgBack.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MsgBack} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MsgBack.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 200));
  if (f != null) {
    writer.writeBool(
      200,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 201));
  if (f != null) {
    writer.writeBool(
      201,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 202));
  if (f != null) {
    writer.writeBool(
      202,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {!proto.MsgBack.ShowType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeString(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeString(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = message.getScreencontent();
  if (f != null) {
    writer.writeMessage(
      300,
      f,
      proto.ScreenContent.serializeBinaryToWriter
    );
  }
  f = message.getScreenoffsetfrom();
  if (f != null) {
    writer.writeMessage(
      301,
      f,
      proto.ScreenOffset.serializeBinaryToWriter
    );
  }
  f = message.getScreenoffsetto();
  if (f != null) {
    writer.writeMessage(
      302,
      f,
      proto.ScreenOffset.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.MsgBack.ShowType = {
  SHOW: 0,
  TUNE: 1,
  ADDITIONAL: 2
};

/**
 * required int32 id = 1;
 * @return {number}
 */
proto.MsgBack.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool introduceYourself = 200;
 * @return {boolean}
 */
proto.MsgBack.prototype.getIntroduceyourself = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 200, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setIntroduceyourself = function(value) {
  return jspb.Message.setField(this, 200, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearIntroduceyourself = function() {
  return jspb.Message.setField(this, 200, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasIntroduceyourself = function() {
  return jspb.Message.getField(this, 200) != null;
};


/**
 * optional bool reboot = 201;
 * @return {boolean}
 */
proto.MsgBack.prototype.getReboot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 201, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setReboot = function(value) {
  return jspb.Message.setField(this, 201, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearReboot = function() {
  return jspb.Message.setField(this, 201, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasReboot = function() {
  return jspb.Message.getField(this, 201) != null;
};


/**
 * optional bool screenEnable = 202;
 * @return {boolean}
 */
proto.MsgBack.prototype.getScreenenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 202, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setScreenenable = function(value) {
  return jspb.Message.setField(this, 202, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearScreenenable = function() {
  return jspb.Message.setField(this, 202, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasScreenenable = function() {
  return jspb.Message.getField(this, 202) != null;
};


/**
 * optional string testMsg = 3;
 * @return {string}
 */
proto.MsgBack.prototype.getTestmsg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setTestmsg = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearTestmsg = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasTestmsg = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint32 unixtime = 4;
 * @return {number}
 */
proto.MsgBack.prototype.getUnixtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setUnixtime = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearUnixtime = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasUnixtime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string textToShow = 5;
 * @return {string}
 */
proto.MsgBack.prototype.getTexttoshow = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setTexttoshow = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearTexttoshow = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasTexttoshow = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 timeMsToShow = 6;
 * @return {number}
 */
proto.MsgBack.prototype.getTimemstoshow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setTimemstoshow = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearTimemstoshow = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasTimemstoshow = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ShowType showType = 7;
 * @return {!proto.MsgBack.ShowType}
 */
proto.MsgBack.prototype.getShowtype = function() {
  return /** @type {!proto.MsgBack.ShowType} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.MsgBack.ShowType} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setShowtype = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearShowtype = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasShowtype = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 relaysToSwitch = 8;
 * @return {number}
 */
proto.MsgBack.prototype.getRelaystoswitch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setRelaystoswitch = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearRelaystoswitch = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasRelaystoswitch = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool relaysToSwitchState = 9;
 * @return {boolean}
 */
proto.MsgBack.prototype.getRelaystoswitchstate = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setRelaystoswitchstate = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearRelaystoswitchstate = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasRelaystoswitchstate = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool atxEnable = 10;
 * @return {boolean}
 */
proto.MsgBack.prototype.getAtxenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setAtxenable = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearAtxenable = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasAtxenable = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional uint32 playMp3 = 11;
 * @return {number}
 */
proto.MsgBack.prototype.getPlaymp3 = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setPlaymp3 = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearPlaymp3 = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasPlaymp3 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional uint32 volume = 12;
 * @return {number}
 */
proto.MsgBack.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setVolume = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearVolume = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasVolume = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional uint32 brightness = 13;
 * @return {number}
 */
proto.MsgBack.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setBrightness = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearBrightness = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasBrightness = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional uint32 pwmPin = 14;
 * @return {number}
 */
proto.MsgBack.prototype.getPwmpin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setPwmpin = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearPwmpin = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasPwmpin = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint32 pwmValue = 15;
 * @return {number}
 */
proto.MsgBack.prototype.getPwmvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setPwmvalue = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearPwmvalue = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasPwmvalue = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint32 pwmPeriod = 16;
 * @return {number}
 */
proto.MsgBack.prototype.getPwmperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setPwmperiod = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearPwmperiod = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasPwmperiod = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional string ledValue = 17;
 * @return {string}
 */
proto.MsgBack.prototype.getLedvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 17, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setLedvalue = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearLedvalue = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasLedvalue = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional uint32 ledPeriod = 18;
 * @return {number}
 */
proto.MsgBack.prototype.getLedperiod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setLedperiod = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearLedperiod = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasLedperiod = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional string ledBaseColor = 19;
 * @return {string}
 */
proto.MsgBack.prototype.getLedbasecolor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 19, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setLedbasecolor = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearLedbasecolor = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasLedbasecolor = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string ledBlinkColors = 20;
 * @return {string}
 */
proto.MsgBack.prototype.getLedblinkcolors = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.setLedblinkcolors = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearLedblinkcolors = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasLedblinkcolors = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ScreenContent screenContent = 300;
 * @return {?proto.ScreenContent}
 */
proto.MsgBack.prototype.getScreencontent = function() {
  return /** @type{?proto.ScreenContent} */ (
    jspb.Message.getWrapperField(this, proto.ScreenContent, 300));
};


/**
 * @param {?proto.ScreenContent|undefined} value
 * @return {!proto.MsgBack} returns this
*/
proto.MsgBack.prototype.setScreencontent = function(value) {
  return jspb.Message.setWrapperField(this, 300, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearScreencontent = function() {
  return this.setScreencontent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasScreencontent = function() {
  return jspb.Message.getField(this, 300) != null;
};


/**
 * optional ScreenOffset screenOffsetFrom = 301;
 * @return {?proto.ScreenOffset}
 */
proto.MsgBack.prototype.getScreenoffsetfrom = function() {
  return /** @type{?proto.ScreenOffset} */ (
    jspb.Message.getWrapperField(this, proto.ScreenOffset, 301));
};


/**
 * @param {?proto.ScreenOffset|undefined} value
 * @return {!proto.MsgBack} returns this
*/
proto.MsgBack.prototype.setScreenoffsetfrom = function(value) {
  return jspb.Message.setWrapperField(this, 301, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearScreenoffsetfrom = function() {
  return this.setScreenoffsetfrom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasScreenoffsetfrom = function() {
  return jspb.Message.getField(this, 301) != null;
};


/**
 * optional ScreenOffset screenOffsetTo = 302;
 * @return {?proto.ScreenOffset}
 */
proto.MsgBack.prototype.getScreenoffsetto = function() {
  return /** @type{?proto.ScreenOffset} */ (
    jspb.Message.getWrapperField(this, proto.ScreenOffset, 302));
};


/**
 * @param {?proto.ScreenOffset|undefined} value
 * @return {!proto.MsgBack} returns this
*/
proto.MsgBack.prototype.setScreenoffsetto = function(value) {
  return jspb.Message.setWrapperField(this, 302, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MsgBack} returns this
 */
proto.MsgBack.prototype.clearScreenoffsetto = function() {
  return this.setScreenoffsetto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MsgBack.prototype.hasScreenoffsetto = function() {
  return jspb.Message.getField(this, 302) != null;
};


goog.object.extend(exports, proto);
